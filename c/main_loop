for tt=2:nt
tt

% find velocity from vorticity via streamfunction
psi = fft2d(wzq(:,:,tt),-2)./k2;
vx  = fft2d(+1i*ky.*psi,+2);
vy  = fft2d(-1i*kx.*psi,+2);
vxw_x = -0.5*fft2d(vx.^2+vy.^2,-2);
vxw_y = 1i*ky.*vxw_x;
vxw_x = 1i*kx.*vxw_x;
vxw_x = vxw_x+fft2d(vy.*(wzq(:,:,tt)+2.0*(omega+shear)),-2);
vxw_y = vxw_y-fft2d(vx.*(wzq(:,:,tt)+2.0* omega       ),-2);

% compute gas pressure and dust drift velocity
fac1 = (rho(:,:,tt)/rho0)./((1.0+rho(:,:,tt)/rho0).^2+(2.0*omega*tau)^2);
for jj=1:num_pressure_iter
    nlxf = vxw_x+qx;
    nlyf = vxw_y+qy;
    hf   = -1i*(kx.*nlxf+ky.*nlyf)./k2;
    dPdx = fft2d(1i*kx.*hf,+2);
    dPdy = fft2d(1i*ky.*hf,+2)+dPdR;
    qx   = fft2d(fac1.*((1.0+rho(:,:,tt)/rho0).*dPdx+2.0*omega*tau*dPdy),-2);
    qy   = fft2d(fac1.*((1.0+rho(:,:,tt)/rho0).*dPdy-2.0*omega*tau*dPdx),-2);
end
divq = dt*fft2d(1i*(kx.*qx+ky.*qy),+2)*(rho0*tau);
crlq = dt*fft2d(1i*(kx.*qy-ky.*qx),+2);

% iterate to find displacements
vx_buf = add_buffer(vx+vxb,bufx,bufy);
vy_buf = add_buffer(vy    ,bufx,bufy);
for jj=1:num_sl_disp_iter
    delx          = dt*interpn(x_buf,y_buf,vx_buf,xi,yi,interp_method1);
    dely          = dt*interpn(x_buf,y_buf,vy_buf,xi,yi,interp_method1);
    xi            = x-delx;
    yi            = y-dely;
    xi(xi> Lx/2)  = xi(xi> Lx/2)-Lx;
    xi(xi<-Lx/2)  = xi(xi<-Lx/2)+Lx;
    yi(yi> Ly/2)  = yi(yi> Ly/2)-Ly;
    yi(yi<-Ly/2)  = yi(yi<-Ly/2)+Ly;
end
xi2           = x-2.0*delx;
yi2           = y-2.0*dely;
xi2(xi2> Lx/2)= xi2(xi2> Lx/2)-Lx;
xi2(xi2<-Lx/2)= xi2(xi2<-Lx/2)+Lx;
yi2(yi2> Ly/2)= yi2(yi2> Ly/2)-Ly;
yi2(yi2<-Ly/2)= yi2(yi2<-Ly/2)+Ly;

% advect forward one more step
wz_buf = add_buffer(wzq(:,:,tt-1),bufx,bufy);
rho_buf= add_buffer(rho(:,:,tt-1),bufx,bufy);
divq_buf = add_buffer(divq(:,:),bufx,bufy);
crlq_buf = add_buffer(crlq(:,:),bufx,bufy);
wzq(:,:,tt+1) = fft2d(hypvisc.*fft2d(interpn(x_buf,y_buf,wz_buf,xi2,yi2,interp_method2)  + 2.0*interpn(x_buf,y_buf,crlq_buf,xi,yi,interp_method2),-2),+2);
rho(:,:,tt+1) = fft2d(hypvisc.*fft2d(interpn(x_buf,y_buf,rho_buf,xi2,yi2,interp_method2) - 2.0*interpn(x_buf,y_buf,divq_buf,xi,yi,interp_method2),-2),+2);
end
